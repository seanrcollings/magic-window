from enum import Enum
from typing import Any
from . import con as con
from .replies import BarConfigReply as BarConfigReply, InputReply as InputReply

class IpcBaseEvent: ...

class Event(Enum):
    WORKSPACE: str = ...
    OUTPUT: str = ...
    MODE: str = ...
    WINDOW: str = ...
    BARCONFIG_UPDATE: str = ...
    BINDING: str = ...
    SHUTDOWN: str = ...
    TICK: str = ...
    INPUT: str = ...
    WORKSPACE_FOCUS: str = ...
    WORKSPACE_INIT: str = ...
    WORKSPACE_EMPTY: str = ...
    WORKSPACE_URGENT: str = ...
    WORKSPACE_RELOAD: str = ...
    WORKSPACE_RENAME: str = ...
    WORKSPACE_RESTORED: str = ...
    WORKSPACE_MOVE: str = ...
    WINDOW_NEW: str = ...
    WINDOW_CLOSE: str = ...
    WINDOW_FOCUS: str = ...
    WINDOW_TITLE: str = ...
    WINDOW_FULLSCREEN_MODE: str = ...
    WINDOW_MOVE: str = ...
    WINDOW_FLOATING: str = ...
    WINDOW_URGENT: str = ...
    WINDOW_MARK: str = ...
    SHUTDOWN_RESTART: str = ...
    SHUTDOWN_EXIT: str = ...
    INPUT_ADDED: str = ...
    INPUT_REMOVED: str = ...

class WorkspaceEvent(IpcBaseEvent):
    ipc_data: Any = ...
    change: Any = ...
    current: Any = ...
    old: Any = ...
    def __init__(self, data: Any, conn: Any, _Con: Any = ...) -> None: ...

class OutputEvent(IpcBaseEvent):
    ipc_data: Any = ...
    change: Any = ...
    def __init__(self, data: Any) -> None: ...

class ModeEvent(IpcBaseEvent):
    ipc_data: Any = ...
    change: Any = ...
    pango_markup: Any = ...
    def __init__(self, data: Any) -> None: ...

class WindowEvent(IpcBaseEvent):
    ipc_data: Any = ...
    change: Any = ...
    container: Any = ...
    def __init__(self, data: Any, conn: Any, _Con: Any = ...) -> None: ...

class BarconfigUpdateEvent(IpcBaseEvent, BarConfigReply): ...

class BindingInfo:
    ipc_data: Any = ...
    command: Any = ...
    event_state_mask: Any = ...
    input_code: Any = ...
    symbol: Any = ...
    input_type: Any = ...
    symbols: Any = ...
    mods: Any = ...
    def __init__(self, data: Any) -> None: ...

class BindingEvent(IpcBaseEvent):
    ipc_data: Any = ...
    change: Any = ...
    binding: Any = ...
    def __init__(self, data: Any) -> None: ...

class ShutdownEvent(IpcBaseEvent):
    ipc_data: Any = ...
    change: Any = ...
    def __init__(self, data: Any) -> None: ...

class TickEvent(IpcBaseEvent):
    ipc_data: Any = ...
    first: Any = ...
    payload: Any = ...
    def __init__(self, data: Any) -> None: ...

class InputEvent(IpcBaseEvent):
    ipc_data: Any = ...
    change: Any = ...
    input: Any = ...
    def __init__(self, data: Any) -> None: ...
