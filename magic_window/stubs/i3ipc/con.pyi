from __future__ import annotations
from typing import Any, List, Optional
from . import replies as replies
from .model import Gaps as Gaps, Rect as Rect

class Con:
    id: int
    border: str
    current_border_width: int
    ipc_data: dict
    parent: Con | None
    marks: list[str]
    type: str
    nodes: list[Con]
    floating_nodes: list[Con]
    window_class: str
    window_instance: str
    window_role: str
    window_title: str
    rect: Rect
    window_rect: Rect
    deco_rect: Rect
    geometry: Rect
    gaps: Gaps
    name: str
    focused: bool
    def __init__(self, data: Any, parent: Any, conn: Any) -> None: ...
    def __iter__(self) -> Any: ...
    def root(self) -> Con: ...
    def descendants(self) -> List[Con]: ...
    def descendents(self) -> List[Con]: ...
    def leaves(self) -> List[Con]: ...
    def command(self, command: str) -> List[replies.CommandReply]: ...
    def command_children(self, command: str) -> List[replies.CommandReply]: ...
    def workspaces(self) -> List[Con]: ...
    def find_focused(self) -> Optional[Con]: ...
    def find_by_id(self, id: int) -> Optional[Con]: ...
    def find_by_pid(self, pid: int) -> List[Con]: ...
    def find_by_window(self, window: int) -> Optional[Con]: ...
    def find_by_role(self, pattern: str) -> List[Con]: ...
    def find_named(self, pattern: str) -> List[Con]: ...
    def find_titled(self, pattern: str) -> List[Con]: ...
    def find_classed(self, pattern: str) -> List[Con]: ...
    def find_instanced(self, pattern: str) -> List[Con]: ...
    def find_marked(self, pattern: str) -> List[Con]: ...
    def find_fullscreen(self) -> List[Con]: ...
    def workspace(self) -> Optional[Con]: ...
    def scratchpad(self) -> Con: ...
